datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//** role - admin, sales, supply-chain, finance, logistics, accounting

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  roleId        String
  profileId     String?
  isOnline      Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastActiveAt  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  accounts Account[]
  profile  Profile?
  settings UserSettings?
  role     Role          @relation(fields: [roleId], references: [id])

  createdLeads Lead[] @relation("user-created-leads")
  updatedLeads Lead[] @relation("user-updated-leads")
  deletedLeads Lead[] @relation("user-deleted-leads")

  createdContacts Contact[] @relation("user-created-contacts")
  updatedContacts Contact[] @relation("user-updated-contacts")
  deletedContacts Contact[] @relation("user-deleted-contacts")

  createdLeadActivities LeadActivity[] @relation("user-created-lead-activities")
  updatedLeadActivities LeadActivity[] @relation("user-updated-lead-activities")
  deletedLeadActivities LeadActivity[] @relation("user-deleted-lead-activities")
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique

  details Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserSettings {
  id     String @id @default(uuid())
  userId String @unique

  // Dashboard settings
  dashboardSettings Json?

  // System settings
  systemSettings Json?

  // Role-specific settings
  roleSettings Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id        String   @id
  data      String   @db.Text // JSON string containing all settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

model RoleSettings {
  id       String @id @default(uuid())
  role     String @unique
  settings Json
}

model Role {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @default("")
  isSystem    Boolean @default(false) // To mark built-in roles that can't be deleted

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  permissions RolePermissions[]
  users       User[]
}

model Permission {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  permissions RolePermissions[]
}

model RolePermissions {
  roleId       String
  permissionId String
  actions      String[] @default([])

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Lead {
  id                String   @id @default(cuid())
  name              String   @default("")
  email             String   @default("")
  phone             String   @default("")
  title             String?  @default("")
  company           String?  @default("")
  status            String   @default("")
  isFavorite        Boolean  @default(false)
  street            String?  @default("")
  block             String?  @default("")
  city              String?  @default("")
  zipCode           String?  @default("")
  county            String?  @default("")
  state             String?  @default("")
  country           String?  @default("")
  streetNo          String?  @default("")
  buildingFloorRoom String?  @default("")
  gln               String?  @default("")
  owners            String[] @default([]) //* ids of users who manages the lead

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  activities LeadActivity[]

  createdByUser User? @relation("user-created-leads", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedByUser User? @relation("user-updated-leads", fields: [updatedBy], references: [id], onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-leads", fields: [deletedBy], references: [id], onDelete: Cascade)
}

model LeadActivity {
  id        String    @id @default(cuid())
  leadId    String
  title     String
  type      String
  link      String?   @default("")
  body      String?   @default("")
  date      DateTime? @db.Date
  startTime String?   @default("")
  endTime   String?   @default("")
  status    String
  metadata  Json?     @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  createdByUser User? @relation("user-created-lead-activities", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedByUser User? @relation("user-updated-lead-activities", fields: [updatedBy], references: [id], onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-lead-activities", fields: [deletedBy], references: [id], onDelete: Cascade)

  @@map("LeadActivities")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  contactId String   @unique
  isActive  Boolean  @default(true)
  title     String?
  company   String?
  type      String
  priority  String
  comments  String?  @default("")
  industry  String[] @default([])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  createdByUser User? @relation("user-created-contacts", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedByUser User? @relation("user-updated-contacts", fields: [updatedBy], references: [id], onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-contacts", fields: [deletedBy], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      String // User who performed the action
  action    String // Description of the action
  eventType String // user, system, security, data
  severity  String // info, warning, error, critical
  details   String // Additional details about the action
  ipAddress String? // IP address of the user
  userAgent String? // User agent of the browser
  metadata  Json? // Additional metadata as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([user])
  @@index([eventType])
  @@index([severity])
}
