datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//** role - admin, sales, supply-chain, finance, logistics, accounting

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  roleId        String
  profileId     String?
  isOnline      Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastActiveAt  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  accounts Account[]
  profile  Profile?
  settings UserSettings?
  role     Role          @relation(fields: [roleId], references: [id])

  createdLeads Lead[] @relation("user-created-leads")
  updatedLeads Lead[] @relation("user-updated-leads")
  deletedLeads Lead[] @relation("user-deleted-leads")

  createdRequisitions Requisition[] @relation("user-created-requisitions")
  updatedRequisitions Requisition[] @relation("user-updated-requisitions")
  deletedRequisitions Requisition[] @relation("user-deleted-requisitions")

  createdLeadActivities LeadActivity[] @relation("user-created-lead-activities")
  updatedLeadActivities LeadActivity[] @relation("user-updated-lead-activities")
  deletedLeadActivities LeadActivity[] @relation("user-deleted-lead-activities")

  createdRequisitionActivities RequisitionActivity[] @relation("user-created-requisition-activities")
  updatedRequisitionActivities RequisitionActivity[] @relation("user-updated-requisition-activities")
  deletedRequisitionActivities RequisitionActivity[] @relation("user-deleted-requisition-activities")

  requisitionSalesPersons RequisitionSalesPerson[]
  requisitionOmegaBuyers  RequisitionOmegaBuyer[]

  assignedBuyers BusinessPartner[] @relation("user-assigned-buyers")
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique

  details Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserSettings {
  id     String @id @default(uuid())
  userId String @unique

  // Dashboard settings
  dashboardSettings Json?

  // System settings
  systemSettings Json?

  // Role-specific settings
  roleSettings Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Settings {
  id       String @id @default(uuid())
  roleCode String @unique
  data     Json?  @default("{}") //* JSON containing all settings

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model RoleSettings {
  id       String @id @default(uuid())
  role     String @unique
  settings Json
}

model Role {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @default("")
  isSystem    Boolean @default(false) // To mark built-in roles that can't be deleted

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  permissions RolePermissions[]
  users       User[]
}

model Permission {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  permissions RolePermissions[]
}

model RolePermissions {
  roleId       String
  permissionId String
  actions      String[] @default([])

  role       Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model CompanyAccount {
  id                String   @id @default(uuid())
  name              String
  email             String?  @default("")
  phone             String?  @default("")
  website           String?  @default("")
  industry          String[] @default([])
  isActive          Boolean? @default(true)
  street            String?  @default("")
  streetNo          String?  @default("")
  buildingFloorRoom String?  @default("")
  block             String?  @default("")
  city              String?  @default("")
  zipCode           String?  @default("")
  county            String?  @default("")
  state             String?  @default("")
  country           String?  @default("")
  gln               String?  @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  contacts CompanyAccountContact[]
  leads    Lead[]
}

model CompanyAccountContact {
  accountId String
  contactId String

  account CompanyAccount @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  contact Contact        @relation(fields: [contactId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([accountId, contactId])
}

model Contact {
  id                String   @id @default(uuid())
  name              String
  email             String
  phone             String
  title             String?  @default("")
  isActive          Boolean? @default(true)
  street            String?  @default("")
  streetNo          String?  @default("")
  buildingFloorRoom String?  @default("")
  block             String?  @default("")
  city              String?  @default("")
  zipCode           String?  @default("")
  county            String?  @default("")
  state             String?  @default("")
  country           String?  @default("")
  gln               String?  @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  accountContacts CompanyAccountContact[]
  leadContacts    LeadContact[]
}

model Lead {
  id                String   @id @default(uuid())
  name              String   @default("")
  email             String   @default("")
  phone             String   @default("")
  title             String?  @default("")
  accountId         String?
  status            String   @default("")
  isFavorite        Boolean  @default(false)
  street            String?  @default("")
  block             String?  @default("")
  city              String?  @default("")
  zipCode           String?  @default("")
  county            String?  @default("")
  state             String?  @default("")
  country           String?  @default("")
  streetNo          String?  @default("")
  buildingFloorRoom String?  @default("")
  gln               String?  @default("")
  owners            String[] @default([]) //* ids of users who manages the lead

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  activities LeadActivity[]
  contacts   LeadContact[]

  account       CompanyAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdByUser User?           @relation("user-created-leads", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User?           @relation("user-updated-leads", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User?           @relation("user-deleted-leads", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model LeadContact {
  leadId    String
  contactId String

  lead    Lead    @relation(fields: [leadId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([leadId, contactId])
}

model LeadActivity {
  id        String    @id @default(uuid())
  leadId    String
  title     String
  type      String
  link      String?   @default("")
  body      String?   @default("")
  date      DateTime?
  startTime String?   @default("")
  endTime   String?   @default("")
  status    String
  metadata  Json?     @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  lead Lead @relation(fields: [leadId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdByUser User? @relation("user-created-lead-activities", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User? @relation("user-updated-lead-activities", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-lead-activities", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Requisition {
  id                               String   @id @default(uuid())
  code                             Int      @unique @default(autoincrement())
  customerCode                     String
  contactId                        String?
  customerPn                       String?  @default("")
  requestedItems                   String[] @default([])
  date                             DateTime
  urgency                          String?  @default("")
  salesCategory                    String
  isPurchasingInitiated            Boolean  @default(false)
  isActiveFollowUp                 Boolean  @default(false)
  purchasingStatus                 String?  @default("")
  result                           String?  @default("")
  reason                           String?  @default("")
  reqReviewResult                  String[] @default([])
  quantity                         Decimal?
  customerStandardPrice            Decimal?
  customerStandardOpportunityValue Decimal?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  salesPersons RequisitionSalesPerson[]
  omegaBuyers  RequisitionOmegaBuyer[]
  activities   RequisitionActivity[]
  customer     BusinessPartner?         @relation(fields: [customerCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)

  createdByUser User? @relation("user-created-requisitions", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User? @relation("user-updated-requisitions", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-requisitions", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)

  quotations Quotation[]

  @@unique([customerCode, code])
}

model RequisitionSalesPerson {
  requisitionId String
  userId        String

  requisition Requisition @relation(fields: [requisitionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([requisitionId, userId])
}

model RequisitionOmegaBuyer {
  requisitionId String
  userId        String

  requisition Requisition @relation(fields: [requisitionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([requisitionId, userId])
}

model RequisitionActivity {
  id            String    @id @default(uuid())
  requisitionId String
  title         String
  type          String
  link          String?   @default("")
  body          String?   @default("")
  date          DateTime?
  startTime     String?   @default("")
  endTime       String?   @default("")
  status        String
  metadata      Json?     @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  requisition Requisition @relation(fields: [requisitionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdByUser User? @relation("user-created-requisition-activities", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User? @relation("user-updated-requisition-activities", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-requisition-activities", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Quotation {
  id              String   @id @default(uuid())
  code            Int      @unique @default(autoincrement())
  customerId      String
  contactId       String?
  customerRefNo   String?  @default("")
  requisitionCode Int
  status          String
  postingDate     DateTime
  validUntil      DateTime
  documentDate    DateTime
  items           String[]
  owner           String
  accExec         String?  @default("")
  accManager      String?  @default("")
  accAssoc        String?  @default("")
  brokerBuy       String?  @default("")
  tegPurc         String?  @default("")
  bpProject       String?  @default("")
  remark          String?  @default("")
  freight         String?  @default("")
  tax             Decimal?
  total           Decimal?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  requisition Requisition @relation(fields: [requisitionCode], references: [code], onUpdate: Cascade, onDelete: Cascade)
}

model Customer {
  id                String  @id @default(uuid())
  CardCode          String
  CardName          String? @default("")
  CardType          String? @default("")
  GroupCode         String? @default("")
  MailAddress       String? @default("")
  MailZipCode       String? @default("")
  Phone1            String? @default("")
  ContactPerson     String? @default("")
  PayTermsGrpCode   String? @default("")
  Currency          String? @default("")
  U_VendorCode      String? @default("")
  U_OMEG_QBRelated  String? @default("")
  street            String? @default("")
  block             String? @default("")
  city              String? @default("")
  zipCode           String? @default("")
  county            String? @default("")
  state             String? @default("")
  country           String? @default("")
  streetNo          String? @default("")
  buildingFloorRoom String? @default("")
  gln               String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model BusinessPartner {
  id String @id @default(uuid())

  CardCode         String  @unique //TODO: if source "portal" the card cade will be uuid otherwise it will be sap card code
  CardName         String
  CardType         String
  CntctPrsn        String? @default("")
  Currency         String? @default("")
  GroupCode        Int
  GroupName        String? @default("")
  GroupNum         Int?
  Address          String? @default("")
  ZipCode          String? @default("")
  MailAddres       String? @default("")
  MailZipCod       String? @default("")
  Phone1           String? @default("")
  PymntGroup       String? @default("")
  U_OMEG_QBRelated String? @default("")
  U_VendorCode     String? @default("")
  CreateDate       String
  UpdateDate       String

  accountNo           String? @default("")
  assignedBuyer       String?
  website             String? @default("")
  commondityStrengths Int[]   @default([])
  mfrStrengths        Int[]   @default([])
  avlStatus           String? @default("")
  status              String  @default("")
  scope               String  @default("")
  isCompliantToAs     Boolean @default(false)
  isCompliantToItar   Boolean @default(false)
  terms               String? @default("")
  warranyPeriod       String? @default("")
  omegaReviews        String? @default("")
  qualificationNotes  String? @default("")
  source              String  @default("portal")
  syncStatus          String  @default("pending")

  //* address
  street            String? @default("")
  block             String? @default("")
  city              String? @default("")
  zipCode           String? @default("")
  county            String? @default("")
  state             String? @default("")
  country           String? @default("")
  streetNo          String? @default("")
  buildingFloorRoom String? @default("")
  gln               String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  requisitions Requisition[]

  buyer User? @relation(name: "user-assigned-buyers", fields: [assignedBuyer], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Item {
  id         String  @id @default(uuid())
  BuyUnitMsr String? @default("")
  CreateDate String
  FirmCode   Int?
  FirmName   String? @default("")
  ItemCode   String  @unique //TODO: if source "portal" the card cade will be uuid otherwise it will be sap card code
  ItemName   String
  ItmsGrpCod Int
  ItmsGrpNam String? @default("")
  ManBtchNum String
  UpdateDate String

  source     String @default("portal")
  syncStatus String @default("pending")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

//* synchronization metadata table
model SyncMeta {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  lastSyncAt  DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

//TODO: use userId instead of email and add relationship
//TODO: improve activity log structure
model ActivityLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  user      String //* User who performed the action
  action    String //* Description of the action
  eventType String //* user, system, security, data
  severity  String //* info, warning, error, critical
  details   String //* Additional details about the action
  ipAddress String? //* IP address of the user
  userAgent String? //* User agent of the browser
  metadata  Json? //* Additional metadata as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([user])
  @@index([eventType])
  @@index([severity])
}
