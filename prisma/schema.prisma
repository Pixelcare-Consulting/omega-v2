datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//** role - admin, sales, supply-chain, finance, logistics, accounting

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  roleId        String
  profileId     String?
  isOnline      Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastActiveAt  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  accounts Account[]
  profile  Profile?
  settings UserSettings?
  role     Role          @relation(fields: [roleId], references: [id])

  createdLeads Lead[] @relation("user-created-leads")
  updatedLeads Lead[] @relation("user-updated-leads")
  deletedLeads Lead[] @relation("user-deleted-leads")

  createdRequisitions Requisition[] @relation("user-created-requisitions")
  updatedRequisitions Requisition[] @relation("user-updated-requisitions")
  deletedRequisitions Requisition[] @relation("user-deleted-requisitions")

  createdLeadActivities Activity[] @relation("user-created-activities")
  updatedLeadActivities Activity[] @relation("user-updated-activities")
  deletedLeadActivities Activity[] @relation("user-deleted-activities")

  requisitionSalesPersons RequisitionSalesPerson[]
  requisitionSalesTeam    RequisitionSalesTeam[]
  requisitionOmegaBuyers  RequisitionOmegaBuyer[]

  saleQuoteSalesReps SaleQuote[] @relation("user-sales-rep-sale-quote")
  saleQuoteApprovals SaleQuote[] @relation("user-approval-sale-quote")

  shipmentPurchasers Shipment[] @relation()

  customerExcessListOwners CustomerExcess[]
  supplierOfferListOwners  SupplierOffer[]

  bpAssignedBuyers            BusinessPartner[]              @relation("user-assigned-buyers")
  bpAssignedSalesEmployees    BusinessPartner[]              @relation("user-sales-employee")
  bpAssignedBdrInsideSalesRep BusinessPartner[]              @relation("user-bdr-inside-sales-rep")
  bpAssignedAccountExecutive  BusinessPartner[]              @relation("user-account-executive")
  bpAssignedAccountAssociate  BusinessPartner[]              @relation("user-account-associate")
  bpExcessManagers            BusinessPartnerExcessManager[] @relation("user-excess-managers")
  supplierQuoteBuyers         SupplierQuoteBuyer[]
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique

  details Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserSettings {
  id     String @id @default(uuid())
  userId String @unique

  // Dashboard settings
  dashboardSettings Json?

  // System settings
  systemSettings Json?

  // Role-specific settings
  roleSettings Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Settings {
  id       String @id @default(uuid())
  roleCode String @unique
  data     Json?  @default("{}") //* JSON containing all settings

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model RoleSettings {
  id       String @id @default(uuid())
  role     String @unique
  settings Json
}

model Role {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @default("")
  isSystem    Boolean @default(false) // To mark built-in roles that can't be deleted

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  permissions RolePermissions[]
  users       User[]
}

//TODO: make it nested permissions / supports parent-child relationship permission (RnD)
model Permission {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  permissions RolePermissions[]
}

model RolePermissions {
  roleId       String
  permissionId String
  actions      String[] @default([])

  role       Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model CompanyAccount {
  id          String   @id @default(uuid())
  name        String
  email       String?  @default("")
  phone       String?  @default("")
  website     String?  @default("")
  industry    String?  @default("")
  isActive    Boolean? @default(true)
  fullAddress String?  @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  leads Lead[]
}

model Activity {
  id          String    @id @default(uuid())
  referenceId String
  module      String
  title       String
  type        String
  link        String?   @default("")
  body        String?   @default("")
  date        DateTime?
  startTime   String?   @default("")
  endTime     String?   @default("")
  status      String
  metadata    Json?     @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  createdByUser User? @relation("user-created-activities", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User? @relation("user-updated-activities", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-activities", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Lead {
  id                String   @id @default(uuid())
  name              String   @default("")
  email             String   @default("")
  phone             String   @default("")
  title             String?  @default("")
  accountId         String?
  status            String   @default("")
  isFavorite        Boolean  @default(false)
  street1           String?  @default("")
  street2           String?  @default("")
  street3           String?  @default("")
  block             String?  @default("")
  city              String?  @default("")
  zipCode           String?  @default("")
  county            String?  @default("")
  state             String?  @default("")
  country           String?  @default("")
  streetNo          String?  @default("")
  buildingFloorRoom String?  @default("")
  gln               String?  @default("")
  owners            String[] @default([]) //* ids of users who manages the lead

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  account       CompanyAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdByUser User?           @relation("user-created-leads", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User?           @relation("user-updated-leads", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User?           @relation("user-deleted-leads", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Requisition {
  id                    String    @id @default(uuid())
  code                  Int       @unique @default(autoincrement())
  customerCode          String
  contactId             String?
  customerPn            String?   @default("")
  requestedItems        Json?     @default("[]")
  date                  DateTime
  urgency               String?   @default("")
  salesCategory         String
  isPurchasingInitiated Boolean   @default(false)
  isActiveFollowUp      Boolean   @default(false)
  purchasingStatus      String?   @default("")
  result                String?   @default("")
  reason                String?   @default("")
  reqReviewResult       String[]  @default([])
  quantity              Decimal?
  customerStandardPrice Decimal?
  dateCode              String?   @default("")
  estimatedDeliveryDate DateTime?
  custPoNum             String?
  custPoDockDate        DateTime?
  poStatus              String?   @default("")
  poStatusLastUpdated   DateTime?
  partialMpn            String?   @default("")
  sapQuoteNumber        String?   @default("")
  quotedMpn             String?   @default("")
  quotedQuantity        Decimal?
  quotedPrice           Decimal?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  salesPersons   RequisitionSalesPerson[]
  salesTeam      RequisitionSalesTeam[]
  omegaBuyers    RequisitionOmegaBuyer[]
  supplierQuotes SupplierQuote[]
  shipments      Shipment[]
  customer       BusinessPartner?         @relation(fields: [customerCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)

  createdByUser User? @relation("user-created-requisitions", fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedByUser User? @relation("user-updated-requisitions", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deletedByUser User? @relation("user-deleted-requisitions", fields: [deletedBy], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([customerCode, code])
}

model RequisitionSalesPerson {
  requisitionId String
  userId        String

  requisition Requisition @relation(fields: [requisitionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([requisitionId, userId])
}

model RequisitionSalesTeam {
  requisitionId String
  userId        String

  requisition Requisition @relation(fields: [requisitionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([requisitionId, userId])
}

model RequisitionOmegaBuyer {
  requisitionId String
  userId        String

  requisition Requisition @relation(fields: [requisitionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([requisitionId, userId])
}

model SupplierQuote {
  id                          String    @id @default(uuid())
  code                        Int       @unique @default(autoincrement())
  date                        DateTime
  requisitionCode             Int
  supplierCode                String
  contactId                   String?
  contactedVia                String?   @default("")
  status                      String    @default("")
  result                      String?   @default("")
  sourcingRound               String?   @default("")
  followUpDate                DateTime?
  isPreferredSource           Boolean   @default(false)
  isQuotedSource              Boolean   @default(false)
  isShowsStock                Boolean   @default(false)
  isShowsAvailable            Boolean   @default(false)
  isShowsWithMfr              Boolean   @default(false)
  isShowsWithCommodity        Boolean   @default(false)
  isTrustedSource             Boolean   @default(false)
  isManufacturer              Boolean   @default(false)
  isFd                        Boolean   @default(false)
  isPreviousSourceOldStkOffer Boolean   @default(false)
  itemCode                    String
  ltToSjc                     String?   @default("")
  ltToSjcNumber               String?   @default("")
  ltToSjcUom                  String?   @default("")
  dateCode                    String?   @default("")
  condition                   String?   @default("")
  coo                         String?   @default("")
  roHs                        String?   @default("")
  quotedQuantity              Decimal?
  quotedPrice                 Decimal?
  comments                    String?   @default("")
  estimatedDeliveryDate       DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  requisition Requisition          @relation(fields: [requisitionCode], references: [code], onUpdate: Cascade, onDelete: Cascade)
  supplier    BusinessPartner      @relation(fields: [supplierCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)
  buyers      SupplierQuoteBuyer[]
  shipments   Shipment[]
  item        Item                 @relation(fields: [itemCode], references: [ItemCode], onUpdate: Cascade, onDelete: Cascade)

  @@unique([code, requisitionCode, supplierCode])
}

model SupplierQuoteBuyer {
  supplierQuoteId String
  userId          String

  supplierQuote SupplierQuote @relation(fields: [supplierQuoteId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([supplierQuoteId, userId])
}

model SaleQuote {
  id             String   @id @default(uuid())
  code           Int      @unique @default(autoincrement())
  date           DateTime
  customerCode   String
  billTo         String? //* temporary contain address string - but it should contain aaddress ID 
  shipTo         String? //* temporary contain address string - but it should contain aaddress ID
  contactId      String?
  salesRepId     String
  paymentTerms   Int
  fobPoint       String?
  shippingMethod String?
  validUntil     DateTime
  remarks        String?  @default("")
  lineItems      Json?    @default("[]")
  approvalId     String
  approvalDate   DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  salesRep User            @relation(name: "user-sales-rep-sale-quote", fields: [salesRepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  approval User            @relation(name: "user-approval-sale-quote", fields: [approvalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer BusinessPartner @relation(fields: [customerCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)

  @@unique([code, customerCode])
}

model Shipment {
  id                 String    @id @default(uuid())
  code               Int       @unique @default(autoincrement())
  requisitionCode    Int
  poNumber           String?   @default("")
  prNumber           String?   @default("")
  soNumber           String?   @default("")
  supplierQuoteCode  Int
  qtyToShip          Decimal?
  shipToLocation     String?   @default("")
  purchaserId        String?
  shippingOderStatus String?   @default("")
  datePoPlaced       DateTime?
  dateShipped        DateTime?
  orderUpdates       String?   @default("")

  purchaser     User?         @relation(fields: [purchaserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requisition   Requisition   @relation(fields: [requisitionCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  supplierQuote SupplierQuote @relation(fields: [supplierQuoteCode], references: [code], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  @@unique([code, requisitionCode, supplierQuoteCode])
}

model ProductBrand {
  id            String  @id @default(uuid())
  code          Int     @unique @default(autoincrement())
  name          String
  alias         String
  sourcingHints String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model ProductCommodity {
  id   String @id @default(uuid())
  code Int    @unique @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model ProductAvailability {
  id                String  @id @default(uuid())
  code              Int     @unique @default(autoincrement())
  supplierCode      String
  manufacturerCode  Int
  itemGroupCode     Int?
  isAuthorizedDisti Boolean @default(false)
  isFranchiseDisti  Boolean @default(false)
  isMfrDirect       Boolean @default(false)
  isSpecialPricing  Boolean @default(false)
  isStrongBrand     Boolean @default(false)
  notes             String? @default("")

  supplier BusinessPartner @relation(fields: [supplierCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  @@unique([code, supplierCode])
}

model CustomerExcess {
  id           String   @id @default(uuid())
  code         Int      @unique @default(autoincrement())
  listDate     DateTime
  customerCode String
  fileName     String   @unique //* file name unique, no space allowed, convert space to dash (-) 
  listOwnerId  String?
  lineItems    Json?    @default("[]")

  customer  BusinessPartner @relation(fields: [customerCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)
  listOwner User?           @relation(fields: [listOwnerId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  @@unique([code, customerCode])
}

model SupplierOffer {
  id           String   @id @default(uuid())
  code         Int      @unique @default(autoincrement())
  listDate     DateTime
  supplierCode String
  fileName     String   @unique //* file name unique, no space allowed, convert space to dash (-) 
  listOwnerId  String?
  lineItems    Json?    @default("[]")

  supplier  BusinessPartner @relation(fields: [supplierCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)
  listOwner User?           @relation(fields: [listOwnerId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  @@unique([code, supplierCode])
}

model BusinessPartner {
  id String @id @default(uuid())

  CardCode         String  @unique
  CardName         String
  CardType         String
  CntctPrsn        String? @default("")
  CurrName         String? @default("")
  Currency         String? @default("")
  GroupCode        Int
  GroupName        String? @default("")
  Address          String? @default("")
  ZipCode          String? @default("")
  MailAddres       String? @default("")
  MailZipCod       String? @default("")
  Phone1           String? @default("")
  GroupNum         Int?
  PymntGroup       String?
  U_OMEG_QBRelated String? @default("")
  U_VendorCode     String? @default("")
  ShipToDef        String?
  BillToDef        String?

  CreateDate String
  UpdateDate String

  //* customer fields (QB)
  accountType               String?                        @default("")
  type                      String                         @default("")
  industryType              String?                        @default("")
  isCreditHold              Boolean                        @default(false)
  isWarehousingCustomer     Boolean                        @default(false)
  assignedSalesEmployee     String?
  assignedBdrInsideSalesRep String?
  assignedAccountExecutive  String?
  assignedAccountAssociate  String?
  assignedExcessManagers    BusinessPartnerExcessManager[] @relation("bp-excess-managers")

  //* common (QB)
  status     String  @default("")
  isActive   Boolean @default(true)
  source     String  @default("portal")
  syncStatus String  @default("pending")

  //* supplier fields (QB)
  accountNo          String? @default("")
  assignedBuyer      String?
  website            String? @default("")
  commodityStrengths Int[]   @default([]) //TODO: NEEDS TO BE REMOVE BECAUSE WE ALREADY HAVE PRODUCT AVAILABILITY
  mfrStrengths       Int[]   @default([]) //TODO: NEEDS TO BE REMOVE BECAUSE WE ALREADY HAVE PRODUCT AVAILABILITY
  avlStatus          String? @default("")
  scope              String  @default("")
  isCompliantToAs    Boolean @default(false)
  isCompliantToItar  Boolean @default(false)
  warranyPeriod      String? @default("")
  omegaReviews       String? @default("")
  qualificationNotes String? @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  requisitions          Requisition[]
  supplierQuotes        SupplierQuote[]
  saleQuotes            SaleQuote[]
  productAvailabilities ProductAvailability[]
  customerExcesses      CustomerExcess[]
  supplierOffers        SupplierOffer[]

  buyer             User? @relation(name: "user-assigned-buyers", fields: [assignedBuyer], references: [id], onDelete: Cascade, onUpdate: Cascade)
  salesEmployee     User? @relation(name: "user-sales-employee", fields: [assignedSalesEmployee], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bdrInsideSalesRep User? @relation(name: "user-bdr-inside-sales-rep", fields: [assignedBdrInsideSalesRep], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountExecutive  User? @relation(name: "user-account-executive", fields: [assignedAccountExecutive], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountAssociate  User? @relation(name: "user-account-associate", fields: [assignedAccountAssociate], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BusinessPartnerExcessManager {
  bpCode String
  userId String

  businessPartner BusinessPartner @relation(name: "bp-excess-managers", fields: [bpCode], references: [CardCode], onUpdate: Cascade, onDelete: Cascade)
  user            User            @relation(name: "user-excess-managers", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([bpCode, userId])
}

model Item {
  id         String  @id @default(uuid())
  BuyUnitMsr String? @default("")
  FirmCode   Int?
  FirmName   String? @default("")
  ItemCode   String  @unique
  ItemName   String  @default("")
  ItmsGrpCod Int
  ItmsGrpNam String? @default("")
  ManBtchNum String? @default("N")
  CstGrpCode Int?
  VATLiable  String? @default("N")
  PrchseItem String? @default("N")
  SellItem   String? @default("N")
  InvntItem  String? @default("N")
  IncomeAcct String?
  DfltWH     String? @default("")
  CountryOrg String? @default("") @db.VarChar(3)
  CreateDate String
  UpdateDate String

  source     String @default("portal")
  syncStatus String @default("pending")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  supplierQuotes SupplierQuote[]
}

model Address {
  id         String  @id //* ID - prefix wit "A"
  CardCode   String
  AddrType   String
  Street     String? @default("")
  Address2   String? @default("")
  Address3   String? @default("")
  Block      String? @default("")
  City       String? @default("")
  ZipCode    String? @default("")
  County     String? @default("")
  State      String?
  Country    String?
  StreetNo   String? @default("")
  Building   String? @default("")
  GlblLocNum String? @default("")
  CreateDate String
  source     String  @default("portal")
  syncStatus String  @default("pending")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model Contact {
  id         String  @id //* ID - prefix wit "CO"
  CardCode   String
  FirstName  String
  LastName   String
  Title      String? @default("")
  Position   String? @default("")
  Cellolar   String? @default("")
  E_MailL    String? @default("")
  CreateDate String
  UpdateDate String
  source     String  @default("portal")
  syncStatus String  @default("pending")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

//* synchronization metadata table
model SyncMeta {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  lastSyncAt  DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

//TODO: use userId instead of email and add relationship
//TODO: improve activity log structure
model ActivityLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  user      String //* User who performed the action
  action    String //* Description of the action
  eventType String //* user, system, security, data
  severity  String //* info, warning, error, critical
  details   String //* Additional details about the action
  ipAddress String? //* IP address of the user
  userAgent String? //* User agent of the browser
  metadata  Json? //* Additional metadata as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([user])
  @@index([eventType])
  @@index([severity])
}
